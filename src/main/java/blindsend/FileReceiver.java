package blindsend;

import api.BlindsendAPI;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import util.FileMetadataRequest;
import util.FileMetadataSend;
import util.Keys;
import crypto.CryptoFactory;
import util.BlindsendUtil;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.security.*;
import java.security.spec.X509EncodedKeySpec;

/**
 * Class {@code FileReceiver} provides methods for receiving and decrypting files from blindsend,
 * and for generating file exchange links in the <i>request</i> use case. These methods are responsible
 * for generating necessary cryptographic information and for communication with the blindsend API in the correct workflow.
 */
public class FileReceiver {

    final static Logger LOGGER = LogManager.getLogger(FileReceiver.class);

    private BlindsendAPI api;

    /**
     * Creates new {@code FileReceiver}
     * @param api Blindsend API
     */
    public FileReceiver(BlindsendAPI api){
        this.api = api;
    }

    /**
     * Obtains a link for file exchange via blindsend. Used in the <i>request</i> use case, when Receiver initiates the
     * file exchange.
     * @param pass Password
     * @return File exchange link, to be passed to the Sender for uploading the file
     */
    public URL generateFileExchangeLink(String pass) throws IOException, GeneralSecurityException {
        String linkId = this.api.requestLinkId();

        byte[] kdfSalt = CryptoFactory.generateRandom(16);
        int kdfOps = 1;
        int kdfMemLimit = 8192;
        byte[] passSeed = CryptoFactory.generateSeed(pass, kdfSalt, kdfOps, kdfMemLimit);
        KeyPair keyPairReceiver = CryptoFactory.generateKeyPair(passSeed);
        String pkReceiver = BlindsendUtil.toHex(keyPairReceiver.getPublic().getEncoded());

        URL link = this.api.initializeRequestSession(
                linkId,
                kdfSalt,
                kdfOps,
                kdfMemLimit
        );
        return new URL(link.toString() + "#" + pkReceiver);
    }

    /**
     * Downloads the encrypted file from blindsend, decrypts it and saves it in <i>decryptedFileFolder</i>.
     * Called for receiving the requested files in the <i>request</i> use case.
     * @param linkUrl File exchange link, initially generated by the Receiver when initiating file exchange
     * @param pass Password
     * @param decryptedFileFolder Folder to save decrypted file into
     */
    public void receiveAndDecryptRequestedFile(URL linkUrl, String pass, Path decryptedFileFolder)
            throws GeneralSecurityException, IOException {
        String tempFilePath = System.getProperty("java.io.tmpdir") + "tempDownloadedEncrypted";
        String linkId = BlindsendUtil.extractLinkId(linkUrl.toString());

        FileMetadataRequest fileMetadata = this.api.getFileMetadataRequest(linkId);
        String fileName = fileMetadata.getFileName();
        String decryptedFilePath = decryptedFileFolder + "/" + fileName;
        Keys keys = this.api.getKeys(linkId);

        byte[] kdfSalt = keys.getKdfSalt();
        int kdfOps = keys.getKdfOps();
        int kdfMemLimit = keys.getKdfMemLimit();

        KeyFactory kf = KeyFactory.getInstance("XDH", "BC");
        byte[] pkSenderBytes = keys.getPkSender();
        PublicKey pkSender = kf.generatePublic(new X509EncodedKeySpec(pkSenderBytes));

        byte[] passSeed = CryptoFactory.generateSeed(pass, kdfSalt, kdfOps, kdfMemLimit);
        KeyPair keyPairReceiver = CryptoFactory.generateKeyPair(passSeed);
        PrivateKey skReceiver = keyPairReceiver.getPrivate();

        byte[] masterKey = CryptoFactory.generateMasterKey(skReceiver, pkSender);

        File encryptedFile = this.api.downloadFileRequest(linkId, tempFilePath);

        LOGGER.info("Decrypting and saving file to " + decryptedFileFolder + "/" + fileName);
        CryptoFactory.decryptAndSaveFile(masterKey, encryptedFile, decryptedFilePath);
    }

    /**
     * Downloads the encrypted file from blindsend, decrypts it and saves it in <i>decryptedFileFolder</i>.
     * Called for receiving files in the <i>send</i> use case.
     * @param linkUrl File exchange link, generated by the Sender when initiating file exchange
     * @param pass Password, originally used by file Sender
     * @param decryptedFileFolder Folder to save decrypted file into
     */
    public void receiveAndDecryptFile(URL linkUrl, String pass, Path decryptedFileFolder)
            throws IOException, NoSuchPaddingException, InvalidAlgorithmParameterException, NoSuchAlgorithmException,
            IllegalBlockSizeException, BadPaddingException, NoSuchProviderException, InvalidKeyException {
        String linkId = BlindsendUtil.extractLinkId(linkUrl.toString());
        byte[] seed1 = BlindsendUtil.toByte(BlindsendUtil.extractUriFragment(linkUrl.toString()));

        FileMetadataSend resp = this.api.getFileMetadataSend(linkId);
        byte[] kdfSalt = resp.getKdfSalt();
        int kdfOps = resp.getKdfOps();
        int kdfMemLimit = resp.getKdfMemLimit();
        byte[] fileMetaEncNonce = resp.getFileMetaEncNonce();
        byte[] encFileMetadata = resp.getEncFileMetadata();

        byte[] fileMetadataKey = CryptoFactory.kdf(seed1, "filemeta".getBytes());
        String fileMetadata = new String(CryptoFactory.decryptFileMetadata(encFileMetadata, fileMetadataKey, fileMetaEncNonce));
        String fileName = fileMetadata.substring(0, fileMetadata.lastIndexOf("-"));

        byte[] seed2 = CryptoFactory.generateSeed(pass, kdfSalt, kdfOps, kdfMemLimit);
        byte[] hash = CryptoFactory.hash(BlindsendUtil.concatenate(seed1, seed2));
        byte[] fileKey = CryptoFactory.kdf(hash, "filekey-".getBytes());

        String tempFilePath = System.getProperty("java.io.tmpdir") + "tempDownloadedEncrypted";
        File encryptedFile = this.api.downloadFileSend(linkId, tempFilePath);
        String decryptedFilePath = decryptedFileFolder + "/" + fileName;

        LOGGER.info("Decrypting and saving file to " + decryptedFileFolder + "/" + fileName);
        CryptoFactory.decryptAndSaveFile(fileKey, encryptedFile, decryptedFilePath);
    }
}
